import 'dart:io';
import 'package:general_lib/general_lib.dart';
import "package:path/path.dart" as path;
import 'package:stable_diffusion_library/schemes/stable_diffusion/stable_diffusion.dart';

void main(List<String> args) async {
  final Directory directoryBaseScheme = Directory(path.join(Directory.current.path, "lib", "scheme")).generalLibUtilsDangerRecreate();

  final Directory directoryScheme = Directory(path.join(directoryBaseScheme.path, "scheme")).generalLibUtilsDangerRecreate();
  final Directory directoryDatabaseUniverseScheme = Directory(path.join(directoryBaseScheme.path, "database_universe_scheme")).generalLibUtilsDangerRecreate();

  final String comment = "/// Generated By General Library Documentation Undocument By General Corporation & Global Corporation & General Developer";

  /// generate schemes
  {
    for (int i = 0; i < stableDiffusionLibraryApiSchemes.length; i++) {
      final Map<String, dynamic> values = {
        "@extra": "",
      };
      if (stableDiffusionLibraryApiSchemes[i]["@return_type"] is String == false) {
        stableDiffusionLibraryApiSchemes[i]["@return_type"] = "ok";
      }
      for (final element in values.entries) {
        stableDiffusionLibraryApiSchemes[i][element.key] = element.value;
      }
    }
    await jsonToScripts(
      stableDiffusionLibraryApiSchemes,
      comment: comment,
      directory: Directory(path.join(directoryScheme.path, "api")).generalLibUtilsDangerRecreate(),
    );
    await jsonToScripts(
      stableDiffusionLibrarySchemes,
      comment: comment,
      directory: Directory(path.join(directoryScheme.path, "core")).generalLibUtilsDangerRecreate(),
    );
    await jsonToScripts(
      stableDiffusionLibraryDatabaseSchemes,
      comment: comment,
      directory: Directory(path.join(directoryScheme.path, "database")).generalLibUtilsDangerRecreate(),
    );
    await jsonToScripts(
      stableDiffusionLibraryRespondSchemes,
      comment: comment,
      directory: Directory(path.join(directoryScheme.path, "respond")).generalLibUtilsDangerRecreate(),
    );
  }
  {
    for (var i = 0; i < stableDiffusionLibraryDatabaseSchemes.length; i++) {
      final Map<String, dynamic> data = stableDiffusionLibraryDatabaseSchemes[i];
      if (data["@type"] is String == false) {
        data["@type"] = "";
      }
      final String className = data["@type"];
      if (className.isEmpty) {
        continue;
      }
      final res = jsonToDatabaseUniverse(
        data,
        comment: comment,
        className: className,
      );
      await res.saveToFile(directoryDatabaseUniverseScheme);
    }
  }
  exit(0);
}
